{"version":3,"sources":["components/Header.js","components/spinner.gif","components/Loader.js","components/LocationMarker.js","components/LocationInfoBox.js","components/Map.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","icon","fireIcon","windIcon","mountainIcon","Loader","src","spinner","alt","LocationMarker","lat","lng","onClick","onclick","LocationInfoBox","info","strong","title","Map","eventData","center","zoom","useState","locationInfo","setLocationInfo","console","log","markers","map","ev","categories","id","undefined","geometries","coordinates","bootsrapURLKeys","key","defaultCenter","defaultZoom","defaultProps","App","setEventData","loading","setLoading","useEffect","a","fetch","res","json","events","fetchEvents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b6e6a49e.chunk.js","sourcesContent":["import React from 'react'\r\nimport fireIcon from '@iconify/icons-mdi/fire-alert';\r\nimport mountainIcon from '@iconify/icons-mdi/mountain';\r\nimport windIcon from '@iconify/icons-mdi/weather-windy';\r\nimport {Icon} from '@iconify/react';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <div className=\"header__icons\">\r\n            <h3>Natural Disaster Tracker (Powered By NASA)</h3>\r\n                <div className=\"header__icon2\">\r\n                    <Icon icon={fireIcon} className=\"location-icon2\" />\r\n                    <span>- Wildfire</span> \r\n                    <Icon icon={windIcon} className=\"location-icon2\" />\r\n                    <span>- Storm</span> \r\n                    <Icon icon={mountainIcon} className=\"location-icon2\" />\r\n                    <span>- Volcano</span>\r\n                </div>\r\n            </div>\r\n            \r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","export default __webpack_public_path__ + \"static/media/spinner.223e1344.gif\";","import spinner from './spinner.gif'\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"loader\">\r\n            <img src={spinner} alt=\"loading\"/>\r\n            <p>Fetching Data...</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader\r\n","import {Icon} from '@iconify/react';\r\n\r\n\r\n\r\nconst LocationMarker = ( { lat, lng, onClick, icon,  }) => {\r\n    return (\r\n        <div className=\"location-marker\" onClick={onclick}> \r\n            <Icon icon={icon} className=\"location-icon\" />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocationMarker\r\n","const LocationInfoBox = ({ info }) => {\r\n    return (\r\n        <div className=\"location-info\">\r\n            <h2>Event Location Info</h2>\r\n            <ul>\r\n                <li>ID: <strong>{info.strong}</strong></li>\r\n                <li>Title: <strong>{info.title}</strong></li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocationInfoBox\r\n","import { useState} from 'react'\r\nimport GoogleMapReact from 'google-map-react';\r\nimport LocationMarker from './LocationMarker';\r\nimport fireIcon from '@iconify/icons-mdi/fire-alert';\r\nimport mountainIcon from '@iconify/icons-mdi/mountain';\r\nimport windIcon from '@iconify/icons-mdi/weather-windy';\r\nimport LocationInfoBox from './LocationInfoBox';\r\n\r\nconst Map = ({eventData, center, zoom }) => {\r\n    const [locationInfo, setLocationInfo] = useState(null)\r\n    console.log('locationinfo', locationInfo)\r\n\r\n    const markers = eventData.map( ev => {\r\n        if(ev.categories[0].id === 8){\r\n            if(ev.geometries[0].coordinates[1] !== undefined && ev.geometries[0].coordinates[0] !== undefined){\r\n                console.log('lat', ev.geometries[0].coordinates[1])\r\n                return <LocationMarker \r\n                icon={fireIcon} \r\n                lat={ev.geometries[0].coordinates[1]} lng={ev.geometries[0].coordinates[0]} \r\n                onClick={ () => setLocationInfo({id: ev.id, title: ev.title})} />\r\n            }\r\n        }\r\n        if(ev.categories[0].id === 12){\r\n            if(ev.geometries[0].coordinates[1] !== undefined && ev.geometries[0].coordinates[0] !== undefined){\r\n                console.log('lat', ev.geometries[0].coordinates[1])\r\n                return <LocationMarker icon={mountainIcon} lat={ev.geometries[0].coordinates[1]} lng={ev.geometries[0].coordinates[0]}\r\n                onClick={ () => setLocationInfo({id: ev.id, title: ev.title})}\r\n                />\r\n            }\r\n            \r\n        }\r\n        if(ev.categories[0].id === 10){\r\n            if(ev.geometries[0].coordinates[1] !== undefined && ev.geometries[0].coordinates[0] !== undefined){\r\n                console.log('lat', ev.geometries[0].coordinates[1])\r\n                return <LocationMarker icon={windIcon} lat={ev.geometries[0].coordinates[1]} lng={ev.geometries[0].coordinates[0]}\r\n                onClick={ () => setLocationInfo({id: ev.id, title: ev.title})}\r\n                />\r\n            }\r\n        }\r\n        return null\r\n    })\r\n    return (\r\n        <div className=\"map\">\r\n            <GoogleMapReact\r\n                bootsrapURLKeys={{ key: 'AIzaSyAjeruCkwVxaVFlRcSWENhWpJjFWXSh5IE' }}\r\n                defaultCenter={ center }\r\n                defaultZoom={ zoom }\r\n            >\r\n\r\n            {markers}\r\n               {/* <LocationMarker lat={center.lat} lng={center.lng} /> */}\r\n            </GoogleMapReact>\r\n            { locationInfo && <LocationInfoBox info={locationInfo} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nMap.defaultProps = {\r\n    center: {\r\n        lat: 43.227450629,\r\n        lng: -124.19652481\r\n    },\r\n    zoom: 6\r\n}\r\n\r\nexport default Map\r\n","import { useState, useEffect } from 'react'\nimport Header from './components/Header';\nimport Loader from './components/Loader';\nimport Map from './components/Map';\n\nfunction App() {\n  const [eventData, setEventData] = useState([])\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      setLoading(true)\n      const res = await fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events')\n      const { events} = await res.json()\n     // console.log('events', events)\n      setEventData(events)\n      setLoading(false)\n    }\n    fetchEvents()\n    \n  }, [])\n  //console.log('eventData', eventData)\n  return (\n        <div className=\"App\">\n          <Header/>\n          {!loading? <Map eventData={eventData} /> : <Loader/>}\n        </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}